import pandas as pd

import pickle
import os

from src.Constant import malicious_path, malicious_apis_dict_pick, all_malicious_apis_csv
from src.feature_utils import get_apis, refine_apis


def collect_apis(apis, final_apis_list):
    apis = refine_apis(apis)
    # 初始化列表全是0 row: [0, 0, 0,...,0, 0, 0]
    row = [0 for x in range(len(final_apis_list))]
    for api in apis:
        # 获得api对应的index
        index = final_apis_list.index(api)
        # 这里标记了为1，one hot
        row[index] = 1
    # 返回了标记好的row
    return row


def combine_malicious_apis():
    final_apis_list = []
    count = 0
    file_names = []
    file_paths = []

    with open(malicious_apis_dict_pick, 'rb') as handle:
        apis_list = pickle.load(handle)

    for key in apis_list:
        final_apis_list.append(key[0])

    print("final_apis_list:", len(final_apis_list))

    dataFrame = pd.DataFrame(columns=final_apis_list)

    for root, dirs, files in os.walk(malicious_path):
        file_names.append(files)

    # os.walk()用类似于深度遍历的方式遍历文件夹中的子文件夹以及文件。file_names[0] 是当前的文件夹

    # print("file_names[0]", file_names[0])
    for f in file_names[0]:
        path = malicious_path + '/' + str(f)
        file_paths.append(path)

    # print("file_paths", file_paths)
    for path in file_paths:
        print('reading:' + str(count + 1) + ' file', path)
        apis = get_apis(path)
        row = collect_apis(apis, final_apis_list)
        dataFrame.loc[count] = row
        count += 1
        # todo test
        if count > 5:
            break

    dataFrame.insert(0, "type", 1)
    print(dataFrame)
    dataFrame.to_csv(all_malicious_apis_csv)
    # df1 = pd.read_csv('csv/all_malicious_apis.csv', index_col=0)
    # print("df1", df1)


if __name__ == '__main__':
    combine_malicious_apis()
